//AUTHOR: Nicholas Justus
//COURSE: CPT187
//PURPOSE: Order Sod from external datasheet and have the record written down
//STARTDATE: December 6, 2019
//-------------------------------------------------------------------------------------------------------------------------
package edu.cpt187.justus.participation6;

import java.util.Scanner;

public class MainClass
{

	public static final String[] MENU_OPTIONS = {"Load Inventory", "Create Order", "Quit"};

	public static void main(String[] args) 
	{	
		//Variables
		//Input Scanner
		Scanner input = new Scanner(System.in);
		//Local Variables
		String userName = "";
		char menuSelection = ' ';
		//New Objects
		SodOrder mySodOrder = new SodOrder();
		Inventory currentInventory = new Inventory();
		WriteOrder sodOrders = new WriteOrder("masterFile.dat");

		//Welcome Banner
		displayWelcomeBanner();

		//Input User name
		userName = getUserName(input);

		//Main Menu
		menuSelection = validateMainMenu(input);

		while(menuSelection != 'Q')
		{
			if(menuSelection =='A')
			{
				currentInventory.setLoadItems(getFileName(input));
				if(currentInventory.getRecordCount() <= 0)
				{
					displayNotOpen();
				}
				else 
				{
					mySodOrder.setItemCountArray(currentInventory.getRecordCount());
				}
			}
			else
			{
				currentInventory.setSearchIndex(validateSearchValue(input));
				if(currentInventory.getSearchIndex() < 0)
				{
					displayNotFound();
				}
				else 
				{
					mySodOrder.setItemSelection(currentInventory.getSearchIndex());
					mySodOrder.setItemName(currentInventory.getItemNames());
					mySodOrder.setItemPrice(currentInventory.getItemPrices());
					mySodOrder.setHowMany(validateHowMany(input));
					
					if(mySodOrder.getInStockCount(currentInventory.getInStockCounts()) < mySodOrder.getHowMany())
					{
						displayOutOfStock();
					}
					else
					{
						mySodOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
						mySodOrder.setDiscountName(currentInventory.getDiscountNames());
						mySodOrder.setDiscountRate(currentInventory.getDiscountRates());
						mySodOrder.setDecreaseInStock(currentInventory);
						mySodOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
						//sodOrders.setWriteOrder(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemNames(), currentInventory.getOrderQuantity(), currentInventory.getOrderTotal());
						
						if(mySodOrder.getDiscountRate() > 0.0)
						{
							displayItemReceipt(mySodOrder.getItemName(), mySodOrder.getItemPrice(), mySodOrder.getHowMany(), mySodOrder.getDiscountName(), mySodOrder.getDiscountRate(),
									mySodOrder.getDiscountAmt(), mySodOrder.getDiscountPrice(), mySodOrder.getSubTotal(), mySodOrder.getTaxRate(), 
									mySodOrder.getTaxAmt(), mySodOrder.getTotalCost(), mySodOrder.getPrizeName());
						}
						else
						{
							displayItemReceipt(mySodOrder.getItemName(), mySodOrder.getItemPrice(), mySodOrder.getHowMany(),
									mySodOrder.getSubTotal(), mySodOrder.getTaxRate(), mySodOrder.getTaxAmt(), mySodOrder.getTotalCost(),
									mySodOrder.getPrizeName());
						}
					}
				}
			}
			menuSelection = validateMainMenu(input);
		}
		if(mySodOrder.getTotalCost() > 0.0 && mySodOrder.getDiscountCounts() != null)
		{
			currentInventory.setLoadItems(sodOrders.getFileName(), sodOrders.getRecordCount());
			
			displayFinalReport(userName, currentInventory.getItemNames(), mySodOrder.getItemCounts(), 
					currentInventory.getDiscountNames(), mySodOrder.getDiscountCounts(), 
					currentInventory.getPrizeNames(), mySodOrder.getPrizeCounts(), 
					currentInventory.getInStockCounts());
		}
		//Farewell
		displayFarewellMessage();
		//Closing Input Scanner
		input.close();
	}

	public static void displayWelcomeBanner()
	{
		System.out.printf("%-3s", "Welcome to Sod Sales Program!");
		System.out.printf("%-3s", "\nUse this program to order Sod at various discounts.");
		System.out.printf("%-3s", "\nPlease correctly respond to all prompts.");
	}

	public static void displaySearchMenu()
	{
		System.out.printf("%-3s", "Search for a product ID here: ");
	}

	public static void displayNotOpen()
	{
		System.out.printf("%-3s", "\nThe File could not be opened.\n");
	}
	
	public static void displayNotFound()
	{
		System.out.printf("\n%-3s", "Sorry, the file could not be located.\n");
	}
	
	public static void displayMainMenu()
	{
		System.out.printf("\n%-3s \n", "MAIN MENU");
		System.out.printf("%-4s%-10s\n", "[A]", MENU_OPTIONS[0]);
		System.out.printf("%-4s%-10s\n", "[B]", MENU_OPTIONS[1]);
		System.out.printf("%-4s%-10s\n", "[Q]", MENU_OPTIONS[2]);
		System.out.printf("%-3s", "Enter your selection here: ");
	}

	public static void displayItemMenu(String[] borrowedItemNames, double[] borrowedItemPrices)
	{
		System.out.printf("\n%-3s \n", "SOD MENU");
		System.out.printf("%-3s %1s %-15s %1s %-8.2f\n", "[A]", "for", borrowedItemNames[0], "$", borrowedItemPrices[0]);
		System.out.printf("%-3s %1s %-15s %1s %-8.2f\n", "[B]", "for", borrowedItemNames[1], "$", borrowedItemPrices[1]);
		System.out.printf("%-3s %1s %-15s %1s %-8.2f\n", "[C]", "for", borrowedItemNames[2], "$", borrowedItemPrices[2]);
		System.out.printf("%-3s", "Enter your selection here: ");
	}

	public static void displayHowManyMenu()
	{
		System.out.printf("\n%-3s", "How many orders would you like?");
		System.out.printf("\n%-3s", "Enter your selection here: ");
	}

	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		System.out.printf("\n%-3s \n", "DISCOUNT MENU");
		System.out.printf("%-3s %1s %-15s %8.1f %-1s\n", "[A]", "for", borrowedDiscountNames[0], borrowedDiscountRates[0]*100, "%");
		System.out.printf("%-3s %1s %-15s %8.1f %-1s\n", "[B]", "for", borrowedDiscountNames[1], borrowedDiscountRates[1]*100, "%");
		System.out.printf("%-3s %1s %-15s %8.1f %-1s\n", "[C]", "for", borrowedDiscountNames[2], borrowedDiscountRates[2]*100, "%");
		System.out.printf("%-3s", "Enter your selection here: ");
	}

	public static void displayCountMenu(String[] borrowedItemNames, int borrowedLocalIndex)
	{
		System.out.printf("\n%-3s", "Enter current stock for " + borrowedItemNames[borrowedLocalIndex] + " here: ");
	}	

	public static void displayFarewellMessage()
	{
		System.out.printf("\n%-3s", "\nThank you for using the Sod Sales Program!");
	}

	public static void displayOutOfStock()
	{
		System.out.printf("\n%-3s", "There is not enough sod to fulfill that request.\n");
	}

	public static String getUserName(Scanner borrowedInput)
	{
		System.out.printf("\n%-3s", "Please enter your first name here: ");
		return borrowedInput.next();
	}

	public static char validateMainMenu(Scanner borrowedInput)
	{
		char tempMenuSelection = ' ';
		displayMainMenu();
		tempMenuSelection = borrowedInput.next().toUpperCase().charAt(0);
		while (tempMenuSelection !='A'&&tempMenuSelection !='B'&&tempMenuSelection !='Q')
		{
			System.out.printf("\n%-3s", "\nError: Invalid Input. Please try again.\n");
			displayMainMenu();
			tempMenuSelection = borrowedInput.next().toUpperCase().charAt(0);
		}
		return tempMenuSelection;
	}

	public static String getFileName(Scanner borrowedInput)
	{
		System.out.printf("\n%-3s", "\nPlease enter the file name: ");
		return borrowedInput.next();
	}

	public static int validateSearchValue(Scanner borrowedInput)
	{
		int tempSearchValue = 0;
		displaySearchMenu();
		tempSearchValue = borrowedInput.nextInt();
		while(tempSearchValue <= 0)
		{
			System.out.println("Error: Please enter a number above 0");
			displaySearchMenu();
			tempSearchValue = borrowedInput.nextInt();
		}
		return tempSearchValue;
	}

	public static char validateItemMenu(Scanner borrowedInput, String[] borrowedItemNames, double[] borrowedItemPrices)
	{
		char tempMenuSelection = ' ';
		displayItemMenu(borrowedItemNames, borrowedItemPrices);
		tempMenuSelection = borrowedInput.next().toUpperCase().charAt(0);
		while (tempMenuSelection !='A'&&tempMenuSelection !='B'&&tempMenuSelection !='C')
		{
			System.out.printf("%-3s", "\nError: Invalid Input. Please try again.\n");
			displayItemMenu(borrowedItemNames, borrowedItemPrices);
			tempMenuSelection = borrowedInput.next().toUpperCase().charAt(0);
		}
		return tempMenuSelection;
	}

	public static int validateHowMany(Scanner borrowedInput)
	{
		int tempHowMany = 0;
		displayHowManyMenu();
		tempHowMany = borrowedInput.nextInt();
		while (tempHowMany <= 0)
		{
			System.out.printf("%-3s", "\nError: Must Order 1 Sod Minimum. Please try again.\n");
			displayHowManyMenu();
			tempHowMany = borrowedInput.nextInt();
		}
		return tempHowMany;
	}

	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		char tempMenuSelection = ' ';
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		tempMenuSelection = borrowedInput.next().toUpperCase().charAt(0);
		while (tempMenuSelection !='A'&&tempMenuSelection !='B'&&tempMenuSelection !='C')
		{
			System.out.printf("%-3s", "\nError: Invalid Input. Please try again.\n");
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			tempMenuSelection = borrowedInput.next().toUpperCase().charAt(0);
		}
		return tempMenuSelection;
	}	

	public static int[] validateInStockCounts(Scanner borrowedInput, String[] borrowedItemNames)
	{
		int localCounter = 0;
		int localIndex = 0;
		int[] localCounts = new int[borrowedItemNames.length];
		while(localCounter < borrowedItemNames.length)
		{
			displayCountMenu(borrowedItemNames, localIndex);
			localCounts[localIndex] = borrowedInput.nextInt();

			while(localCounts[localIndex] < 0)
			{
				System.out.printf("%-3s", "\nError: Value must be at least 1. Please try again.\n");
				displayCountMenu(borrowedItemNames, localIndex);
				localCounts[localIndex] = borrowedInput.nextInt();
			}
			localCounter++;
			localIndex++;
		}
		return localCounts;
	}

	public static void displayItemReceipt(String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName)
	{
		System.out.printf("\n%-3s\n", "Order Receipt");
		System.out.printf("%-26s %12s\n", "Sod:", borrowedItemName);
		System.out.printf("%-25s %1s %12.2f\n\n", "Sod Price:", "$" , borrowedItemPrice);
		System.out.printf("%-26s %12s\n", "Discount Type:", borrowedDiscountName);
		System.out.printf("%-25s %13.1f %1s\n", "Discount Rate:", borrowedDiscountRate*100, "%");   
		System.out.printf("%-25s %1s %11.2f\n", "Discount Amount:", "$" , borrowedDiscountAmt);
		System.out.printf("%-25s %1s %11.2f\n\n", "Discounted price:", "$" , borrowedDiscountPrice);
		System.out.printf("%-26s %12d\n\n", "Bags of Sod:", borrowedHowMany);
		System.out.printf("%-25s %1s %11.2f\n\n", "Sub-Total:", "$" , borrowedSubTotal);
		System.out.printf("%-25s %13.1f %1s\n", "Tax Rate:", borrowedTaxRate*100, "%");
		System.out.printf("%-25s %1s %11.2f\n\n", "Tax Amount:", "$" , borrowedTaxAmt);
		System.out.printf("%-25s %1s %11.2f\n\n", "Total Cost:", "$" , borrowedTotalCost);
		System.out.printf("%-26s %12s\n", "Prize Won:", borrowedPrizeName);
	} 

	public static void displayItemReceipt(String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName)
	{
		System.out.printf("\n%-3s\n", "Order Receipt");
		System.out.printf("%-26s %12s\n", "Sod:", borrowedItemName);
		System.out.printf("%-25s %1s %11.2f\n\n", "Sod Price:", "$" , borrowedItemPrice);
		System.out.printf("%-26s %12d\n\n", "Bags of Sod:", borrowedHowMany);
		System.out.printf("%-25s %1s %11.2f\n\n", "Sub-Total:", "$" , borrowedSubTotal);
		System.out.printf("%-25s %13.1f %1s\n", "Tax Rate:", borrowedTaxRate*100, "%");
		System.out.printf("%-25s %1s %11.2f\n\n", "Tax Amount:", "$" , borrowedTaxAmt);
		System.out.printf("%-25s %1s %11.2f\n\n", "Total Cost:", "$" , borrowedTotalCost);
		System.out.printf("%-26s %12s\n", "Prize Won:", borrowedPrizeName);
	} 

	public static void displayFinalReport(String borrowedUserName, String[] borrowedItemNames, int[] borrowedItemCounts, String[] borrowedDiscountNames,int[] borrowedDiscountCounts, String[] borrowedPrizeNames, int[] borrowedPrizeCounts, int[] borrowedInStockCounts)
	{
		System.out.printf("\n%-3s\n", "Final Report");
		System.out.printf("%-25s %12s\n\n", "User:", borrowedUserName);
		System.out.printf("%-25s %12d\n", borrowedItemNames[0]+" in stock:", borrowedInStockCounts[0]);
		System.out.printf("%-25s %12d\n", borrowedItemNames[1]+" in stock:", borrowedInStockCounts[1]);
		System.out.printf("%-25s %12d\n\n", borrowedItemNames[2]+" in stock:", borrowedInStockCounts[2]);
		System.out.printf("%-25s %12d\n", borrowedItemNames[0]+" Ordered:", borrowedItemCounts[0]);
		System.out.printf("%-25s %12d\n", borrowedItemNames[1]+" Ordered:", borrowedItemCounts[1]);
		System.out.printf("%-25s %12d\n\n", borrowedItemNames[2]+" Ordered:", borrowedItemCounts[2]);
		System.out.printf("%-25s %12d\n", borrowedDiscountNames[0]+" Users:", borrowedDiscountCounts[0]);
		System.out.printf("%-25s %12d\n", borrowedDiscountNames[1]+" Users:", borrowedDiscountCounts[1]);
		System.out.printf("%-25s %12d\n\n", borrowedDiscountNames[2]+" Users:", borrowedDiscountCounts[2]);
		System.out.printf("%-25s %12d\n", borrowedPrizeNames[0]+" Prizes:", borrowedPrizeCounts[0]);
		System.out.printf("%-25s %12d\n", borrowedPrizeNames[1]+" Prizes:", borrowedPrizeCounts[1]);
		System.out.printf("%-25s %12d\n", borrowedPrizeNames[2]+" Prizes:", borrowedPrizeCounts[2]);
	}
}
