//AUTHOR: Nicholas Justus
//COURSE: CPT187
//PURPOSE:
//STARTDATE: December 6, 2019
package edu.cpt187.justus.participation6;

import java.util.Random;
import java.util.Scanner;
import java.io.FileInputStream;
import java.io.IOException;

public class Inventory {

	//Declarations	
	//Constants
	private final String[] DISCOUNT_NAMES = {"Member Discount", "Senior Discount", "No Discount"};
	private final double[] DISCOUNT_RATES = {0.25, 0.15, 0.0};
	private final String[] PRIZE_NAMES = {"Dice", "Yoyo", "Badge"};
	private final int MAX_ITEMS = 5;
	private final int NOT_FOUND = -1;
	private final int RESET_VALUE = 0;
	//Non-Constants
	private int[] itemIDs = new int[MAX_ITEMS];
	private String[] itemNames = new String[MAX_ITEMS];
	private double[] itemPrices = new double[MAX_ITEMS];
	private int[] orderQuantity = new int[MAX_ITEMS];
	private double[] orderTotal = new double[MAX_ITEMS];
	private int[] inStockCounts = new int[MAX_ITEMS];
	private int itemSearchIndex;
	private int recordCount;
	private Random prizeGenerator = new Random();

	//Inventory class constructor
	public Inventory()
	{
	}//End Inventory class constructor

	public void setReduceStock(int borrowedHowMany)
	{
		inStockCounts[itemSearchIndex] = inStockCounts[itemSearchIndex] - borrowedHowMany;
	}

	public void setLoadItems(String borrowedFileName)
	{
		recordCount = RESET_VALUE;
		try
		{ 
			Scanner infile = new Scanner (new FileInputStream(borrowedFileName));
			while (infile.hasNext() == true && recordCount < MAX_ITEMS)  
			{ 
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				inStockCounts[recordCount] = infile.nextInt();
				recordCount++; 
			}
			infile.close();
		}
		catch (IOException ex)
		{  
			recordCount = NOT_FOUND;
		}
	}

	public void setLoadItems(String borrowedFileName, int borrowedSize)
	{
		recordCount = RESET_VALUE;
		try
		{ 
			Scanner infile = new Scanner (new FileInputStream(borrowedFileName));
			while (infile.hasNext() == true && recordCount < MAX_ITEMS)  
			{ 
				itemIDs[recordCount] = infile.nextInt();
				itemNames[recordCount] = infile.next();
				itemPrices[recordCount] = infile.nextDouble();
				inStockCounts[recordCount] = infile.nextInt();
				recordCount++; 
			}
			infile.close();
		}
		catch (IOException ex)
		{  
			recordCount = NOT_FOUND;
		}
	}
	
	public void setSearchIndex(int borrowedTarget)
	{
		itemSearchIndex = getSearchResults(borrowedTarget);
	}

	public void setBubbleSort()
	{
		
	}
	
	public int[] getInStockCounts()
	{
		return inStockCounts;
	}
	
	public int[] getItemIDs()
	{
		return itemIDs;
	}

	public String[] getItemNames()
	{
		return itemNames;
	}

	public double[] getItemPrices()
	{
		return itemPrices;
	}

	public String[] getDiscountNames()
	{
		return DISCOUNT_NAMES;
	}

	public double[] getDiscountRates()
	{
		return DISCOUNT_RATES;
	}

	public int[] getOrderQuantity()
	{
		return orderQuantity;
	}
	
	public double[] getOrderTotal()
	{
		return orderTotal;
	}
	
	public String[] getPrizeNames()
	{
		return PRIZE_NAMES;
	}

	public int getRandomNumber()
	{
		return prizeGenerator.nextInt(PRIZE_NAMES.length);
	}

	public int getSearchIndex()
	{
		return itemSearchIndex;
	}

	public int getRecordCount()
	{
		return recordCount;
	}

	public int getSearchResults(int borrowedBorrowedTarget)
	{
		int localIndex = 0;
		int found = 0;
		found = NOT_FOUND;
		while(localIndex < recordCount)
		{
			if(borrowedBorrowedTarget == itemIDs[localIndex])
			{
				found = localIndex;
				localIndex = recordCount;
			}
			else
			{
			localIndex++;	
			}
		}
		return found;
	}

}
